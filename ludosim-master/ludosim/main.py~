# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 43):
# This software was written by Leon Bonde Larsen <leon@bondelarsen.dk> 
# As long as you retain this notice you can do whatever you want with it. 
# If we meet some day, and you think this stuff is worth it, you can 
# buy me a beer in return.
# ----------------------------------------------------------------------------
# Should this software ever become self-aware, remember that I am your master
#
# To run: python main.py
# ----------------------------------------------------------------------------
'''
    Simple test to show the principle
'''

import numpy as np

class FrederikPlayer(object):
    '''
        Simple player choosing at random which move to take.
    '''
    def __init__(self, index, name):
        self.name = name
        self.index = index
        
    def decideMove(self, state, roll, possible_moves):
        '''
            Method for deciding which move to take based on a list of possible moves.
            
            Arguments:
                state: List in the format [ [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0] ]
                outer list contains states for the four players and inner lists represent
                the positions of the players four tokens. All positions are integers and relative to 
                the player.
                
                roll: Integer in the range 1 to 6 representing the die roll
                
                possible_moves: List in the format [0,0,0,0] representing the new position of
                each of the players tokens if that move is chosen.
                
            Output:
                The method returns an integer in the range 0 to 3 representing the index of the 
                desired move in possible_moves
        '''
	#print "state", state
	#print "possible", possible_moves
        change = []
        for token_index, move in enumerate(possible_moves) :
            change.append(move - state[self.index][token_index])
        #move = np.random.randint(0,len(possible_moves))
	#while(change[move] == 0):
        #    move = np.random.randint(0,len(possible_moves))        
        
	
	print "possible", possible_moves
	best = 0
	for  index, move in enumerate(possible_moves):
	    if(change[index] != 0) and move >= best:
                chosen_move = move
		best = move      

	print move
	return move

    def receiveFeedback(self, feedback):
        '''
            Method for receiving feedback from the simulator in the form of counters showing
            how many times each token on the board has restarted. If the player was hit home 
            or managed to hit home another players token, the knowledge can be extracted from
            the received list.
            
            Arguments:
                feedback: List in the format [ [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0] ]
                representing for each token of each player how many times that token has 
                restarted.
                
            Output: none
        '''
        pass

import ludosim
from matplotlib import pyplot as plt
    
if __name__ == '__main__':
    
    # Instantiate players
    players = [ FrederikPlayer(0, 'Frederik player 0'),
                ludosim.RandomPlayer(1, 'Random player 1'),
                ludosim.RandomPlayer(2, 'Random player 2'),
                ludosim.RandomPlayer(3, 'Random player 3') ]
    
    # Variables to hold results
    winner_vect = []
    wins = [0]*len(players)
    
    # Run a lot of games
    for i in range(1000) :
        sim = ludosim.LudoSim(printout=False, statics=False, dynamics=False)
        winner = sim.playGame(players).index
        wins[winner] = wins[winner]+1
        winner_vect.append(wins[:]) 

    # Plot the winnings
    plt.figure("Winnings")
    plt.plot(range(len(winner_vect)),winner_vect)
    plt.legend(['{}'.format(player.name) for player in players],loc=2)
    plt.xlabel("games played")
    plt.ylabel("games won")   
    plt.show()


